package chapter04

ghost
ensures 0 <= r
// In general, we will define the operations on BYTree as methods, such that we can use
// the "dot-syntax" to call the operations, e.g., to write t.BlueCount() instead of BlueCount(t).
pure func (t BYTree) BlueCount_v1() (r int) {
	return match t {
		case BlueLeaf{}: 1
		case YellowLeaf{}: 0
		// When we pattern match against an ADT variant with parameters,
		// we can bind the value of each parameter to a new variable
		// by preceding the name of the variable with '?'
		case Node{?left, ?right}: left.BlueCount_v1() + right.BlueCount_v1()
	}
}

ghost
ensures 0 <= r
pure func (t BYTree) LeftDepth() (r int) {
	return match t {
		case BlueLeaf{}: 0
		case YellowLeaf{}: 0
		// if we are not interested in the value of some specific parameter,
		// we can use the `_` identifier in its place.
		case Node{?left, _}: 1 + left.LeftDepth()
	}
}