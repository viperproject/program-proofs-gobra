package chapter03

// Gobra does not currently provide a nat type for natural numbers.
// In this example, we get around that problem with a precondition that
// enforces the input to be non-negative, and a postcondition that ensures
// that the result is also non-negative.
requires 0 <= n
ensures  0 <= r
// Like in Dafny, termination measures are prescribed with decrease clauses.
decreases n
// Notice that this function is not marked as pure, even though it corresponds
// to a function in Dafny. Unfortunately, pure functions in Gobra are severely
// limited at the moment. In particular, their bodies must consist of a single
// return statement. Furthermore, pure functions are only allowed to return a
// single value. These restrictions may be lifted in the future, but for the
// time being, we implemented this example as a non-pure function to get
// around these limitations. We will adopt this solution whenever this problem
// appears in this chapter.
func Fib(n int) (r int) {
	if n < 2 {
		return n
	} else {
		return Fib(n - 2) + Fib(n - 1)
	}
}


// Go does not provide a sequence type built-in into the language. It does
// provide slices, which can be used to mimic sequences, but all operations 
// done on slices are persistent, e.g., appending to a slice will potentially
// modify the slice in-place, instead of returning a new slice.
// Nonetheless, Gobra provides a sequence type ('seq'). Because this type is
// not available in Go, sequences can only be used in ghost code,
// for specification purposes.
// Because of that, we have made this function ghost.
ghost
requires 0 <= lo  && lo <= hi  && hi <= len(s)
decreases hi - lo
// Unlike Fib, SeqSum can be implemented as pure. The reason is that this
// function is ghost, and thus we are able to use the ternary operator
// in an expression of the shape 'a ? b : c', which evaluates to 'b' if
// 'a' is true, and evaluates to 'c' otherwise.
pure func SeqSum(s seq[int], lo int, hi int) int {
    return lo == hi ? 0 : s[lo] + SeqSum(s, lo + 1, hi)
}

