package chapter03

// 3.3.0. Remaining school work
requires 0 <= c
ensures  0 <= hours
// When '_' is used as a termination measure, this indicates that termination of
// the method is assumed, not proven. Without this assumption, we cannot prove that
// the method 'Study' terminates.
decreases _
// Gobra can reason about calls to a function, even if the body of the called function
// is not provided. This works because Gobra only takes the specification into account
// when reasoning about a function call.
func RequiredStudyTime(c int) (hours int)

requires 0 <= n
requires 0 <= h
decreases n, h
func Study(n int, h int) {
	if h != 0 {
		Study(n, h - 1)
	} else if n == 0 {
	} else {
		hours := RequiredStudyTime(n - 1)
		Study(n - 1, hours)
	}
}

// 3.3.1. Ackermann
requires 0 <= m
requires 0 <= n
ensures  0 <= r
decreases m, n
func Ack(m, n int) (r int) {
	if m == 0 {
		return n + 1
	} else if n == 0 {
		return Ack(m - 1, 1)
	} else {
		return Ack(m - 1, Ack(m, n - 1))
	}
}

// 3.3.2. Mutually recursive methods
requires 0 <= n && n <= 40
decreases 40 - n
func StudyPlan(n int) {
	if n == 40 {
		// done
	} else {
		hours := RequiredStudyTime(n)
		Learn(n, hours)
	}
}

requires 0 <= n && n < 40
requires 0 <= h
decreases 40 - n, h
func Learn(n, h int) {
	if h == 0 {
		StudyPlan(n + 1)
	} else {
		Learn(n, h - 1)
	}
}

// 3.3.3. Refactor a subcomputation
requires 0 <= n
ensures  0 <= r
decreases n, 1
func ExpLess1(n int) (r int) {
	if n == 0 {
		return 0
	} else {
		return ExpLess2(n) + 1
	}
}

requires 1 <= n
ensures  0 <= r
decreases n, 0
func ExpLess2(n int) (r int) {
	return 2 * ExpLess1(n - 1)
}