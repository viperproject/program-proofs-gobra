package chapter03

// Exercise 3.0.

// If F is translated as a pure function, then we must make it ghost as well
// to be able to use the ternary operator. Otherwise, we would need to use if-statements,
// which are not supported in pure functions yet.
ghost
decreases x
pure func F_v1(x int) int {
	return x < 10 ? x : F_v1(x-1)
}

decreases x
func F_v2(x int) int {
	if x < 10{
		return x
	} else {
		return F_v2(x-1)
	}
}

// Exercise 3.1.

// The same considerations from Exercise 3.0. apply to this exercise. In all exercises from this
// section where those considerations apply, we show only the non-pure version.
decreases x
func G(x int) int {
	if 0 <= x {
		return G(x - 2)
	} else {
		return x
	}
}

// Exercise 3.2.

// Gobra is not able to prove termination when the termination measure is only 'x'. In particular,
// this expression is not bounded below by 0, which is one of the requirements that Gobra imposes
// on integer termination measures.
decreases x + 60
func H(x int) int {
	if x < -60 {
		return x
	} else {
		return H(x - 1)
	}
}

// Exercise 3.3.

requires 0 <= x
requires 0 <= y
decreases x, y
func I(x, y int) int {
	if x == 0 || y == 0 {
		return 12
	} else if x % 2 == y % 2 {
		return I(x - 1, y)
	} else {
		return I(x, y - 1)
	}
}

// Exercise 3.4.

requires 0 <= x
requires 0 <= y
decreases x, y
func J(x, y int) int {
	if x == 0 {
		return y
	} else if y == 0 {
		return J(x - 1, 3)
	} else {
		return J(x, y - 1)
	}
}

// Exercise 3.5.

requires 0 <= x
requires 0 <= y
requires 0 <= z
decreases x, y
func K(x, y, z int) int {
	if x < 10 || y < 5 {
		return x + y
	} else if z == 0 {
		return K(x - 1, y, 5)
	} else {
		return K(x, y - 1, z - 1)
	}
}

// Exercise 3.6.

decreases 100 - x
func L(x int) int {
	if x < 100 {
		return L(x + 1) + 10
	} else {
		return x
	}
}
