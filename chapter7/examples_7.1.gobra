package chapter7

ghost
decreases len(x)
pure func (x Unary) Less(y Unary) bool {
	return y != Zero{} && (x.isSuc ==> x.pre.Less(y.pre))
}

/*
 * Gobra does not provide the '<==>' operator. Instead, we use the equality operator '=='
 * to compare two boolean expressions.
 */
ghost
ensures x.Less(y) == (x.UnaryToNat() < y.UnaryToNat())
decreases len(x)
func (x Unary) LessCorrect(y Unary) {
	if x.isSuc && y.isSuc {
		x.pre.LessCorrect(y.pre)
	}
}

ghost
ensures x.Less(y) && y.Less(z) ==> x.Less(z)
decreases len(x)
func LessTransitive(x Unary, y Unary, z Unary) {
	if x.Less(y) && y.Less(z) && x.isSuc {
		LessTransitive(x.pre, y.pre, z.pre)
	}
}
