package chapter6

// Exercise 6.8.

ghost
requires n >= 0
decreases len(xs)
pure func (xs List) LiberalTake(n int) List {
	/*
	* Unlike the Dafny solution, we need to use a pre-condition in Gobra to restrict 'n' to
	* be non-negative. In Dafny, this precondition is not needed, since this requirement is
	* already captured by declaring `n` as a parameter of type `nat`.
	*/
	return n == 0 || xs.isNil ? Nil{} : Cons{xs.head, xs.tail.LiberalTake(n-1)}
}

ghost
requires n >= 0
decreases len(xs)
pure func (xs List) LiberalDrop(n int) List {
	return (n == 0 || xs.isNil) ? xs : xs.tail.LiberalDrop(n-1)
}

ghost
requires n >= 0
ensures n <= xs.Length() ==> xs.Take(n) == xs.LiberalTake(n)
decreases len(xs)
pure func (xs List) SameValueTake(n int) Unit {
	return (n != 0 && xs.isCons) ? xs.tail.SameValueTake(n - 1) : Unit{}
}

ghost
requires n >= 0
ensures n <= xs.Length() ==> xs.Drop(n) == xs.LiberalDrop(n)
decreases len(xs)
pure func (xs List) SameValueDrop(n int) Unit {
	return (n != 0 && xs.isCons) ? xs.tail.SameValueDrop(n - 1) : Unit{}
}

// Exercise 6.10.: The implementation of the lemma "AppendTakeDrop" can be found in examples_6.3.gobra.

// Exercise 6.11.: The implementation of the lemma "TakeDropAppend" can be found in examples_6.3.gobra.
