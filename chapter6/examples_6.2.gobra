package chapter6

ghost
ensures res.Length() == xs.Length() + ys.Length()
decreases len(xs)
pure func (xs List) Append(ys List) (res List) {
	return match xs {
		case Nil{}:
			ys
		case Cons{?head, ?tail}:
			Cons{head, tail.Append(ys)}
	}
}

ghost
ensures xs.Append(ys).Length() == xs.Length() + ys.Length()
decreases len(xs)
pure func (xs List) LengthAppend(ys List) Unit {
	return match xs {
		case Nil{}:
			Unit{}
		case Cons{?head, ?tail}:
			tail.LengthAppend(ys)
	}
}

/** Section 6.2.0 **/

ghost
ensures xs.Append(Nil{}) == xs
decreases len(xs)
pure func (xs List) AppendNil() Unit {
	/*
	 * This example provides the solution to exercise 6.3.
	 */
	return match xs {
		case Nil{}:
			Unit{}
		case Cons{?head, ?tail}:
			// xs.Append(Nil{}) == Cons{head, tail.Append(Nil{})}
			tail.AppendNil()
			// Cons{head, tail.Append(Nil{})} == Cons{head, tail}
			// Cons{head, tail} == xs
	}
}

ghost
ensures xs.Append(ys).Append(zs) == xs.Append(ys.Append(zs))
decreases len(xs)
pure func AppendAssociative(xs List, ys List, zs List) Unit {
	/*
	 * This example provides the solution to exercise 6.4.
	 */
	return match xs {
		case Nil{}:
			Unit{}
		case Cons{?head, ?tail}:
			AppendAssociative(tail, ys, zs)
	}
}
