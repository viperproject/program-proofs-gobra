package chapter5

ghost
requires 0 <= m
decreases m
pure func Reduce(m, x int) int {
	return m == 0 ? x : Reduce(m / 2, x + 1) - m
}

ghost
requires 0 <= m
ensures Reduce(m, x) <= x
func ReduceUpperBound(m, x  int) {
	if m == 0 {
		// trivial
	} else {
		assert Reduce(m, x) == Reduce(m / 2, x + 1) - m
		ReduceUpperBound(m / 2, x + 1)
		assert Reduce(m / 2, x + 1) - m <=  x + 1 - m
		assert x + 1 - m <= x
	}
}

ghost
requires 0 <= m
ensures x - 2 * m <= Reduce(m, x)
func ReduceLowerBound(m, x  int) {
	if m > 0 {
		assert Reduce(m, x) == Reduce(m / 2, x + 1) - m
		ReduceLowerBound(m / 2, x + 1)
		assert Reduce(m / 2, x + 1) - m >= x + 1 - 2 * (m / 2) - m
		assert  x + 1 - 2 * (m / 2) - m >= x + 1 - m - m
		assert x + 1 - m - m > x - 2 * m
	}
}
