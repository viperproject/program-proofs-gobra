package chapter5

// Exercise 5.9.
ghost
requires 0 <= x && 0 <= y
ensures Mult(x, y) == Mult(y, x)
decreases x + y
func MultCommutative_v2(x, y int) {
	if y != 0 && x != 0{
		MultCommutative_v2(x, y - 1)
		MultCommutative_v2(y, x - 1)
		if x == 1 {
			assert Mult(1, y) == 1 + Mult(1, y - 1)
			MultCommutative_v2(1, y - 1)
			assert Mult(1, y) == 1 + Mult(y - 1, 1)
			assert Mult(1, y) == 1 + y - 1 + Mult(y - 1, 0)
			MultByZeroIsZero(y - 1)
			assert Mult(1, y) == Mult(y, 1)
		} else if y == 1 {
			assert Mult(1, x) == 1 + Mult(1, x - 1)
			MultCommutative_v2(1, x - 1)
			assert Mult(1, x) == 1 + Mult(x - 1, 1)
			assert Mult(1, x) == 1 + x - 1 + Mult(x - 1, 0)
			MultByZeroIsZero(x - 1)
			assert Mult(1, x) == Mult(x, 1)
		} else {
			assert Mult(x, y) == x + Mult(x, y - 1)
			assert Mult(x, y) == x + Mult(y - 1, x)
			assert Mult(x, y) == x + y - 1 + Mult(y - 1, x - 1)

			assert Mult(y, x) == y + Mult(y, x - 1)
			assert Mult(y, x) == y + Mult(x - 1, y)
			assert Mult(y, x) == y + x - 1 + Mult(x - 1, y - 1)

			MultCommutative_v2(x - 1, y - 1)

		}
	} else {
		MultByZeroIsZero(x)
		MultByZeroIsZero(y)
	}
}

ghost
requires 0 <= x
ensures  Mult(x, 0) == 0
ensures  Mult(0, x) == 0
decreases x
func MultByZeroIsZero(x int) {
	if x != 0 {
		assert Mult(0, x) == 0 + Mult(0, x - 1)
		MultByZeroIsZero(x - 1) // applying the IH
		assert Mult(0, x - 1) == 0
	}
}