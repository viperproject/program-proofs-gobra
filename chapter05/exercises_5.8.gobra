package chapter05

// Exercise 5.16.

ghost
requires  n in domain(env)
ensures   Eval(e, env) == Eval(Substitute(e, n, env[n]), env)
decreases
func EvalEnv(e Expr, n string, env dict[string]int) {
	match e {
		case Const{_}:
		case Var{_}:
		case ENode{?op, ?args}:
			EvalSubstitute(e, n, env[n], env)
			assert Eval(Substitute(e, n, env[n]), env) == Eval(e, env[n = env[n]])
			assert env == env[n = env[n]]
	}
}

// Exercise 5.17.

ghost
requires  !(n in domain(env))
ensures   Eval(e, env) == Eval(Substitute(e, n, 0), env)
decreases len(e)
func EvalEnvDefault(e Expr, n string, env dict[string]int) {
	match e {
		case Const{_}:
		case Var{_}:
		case ENode{?op, ?args}:
			EvalListEnvDefault(args, op, n, env)
	}
}

ghost
requires  !(n in domain(env))
ensures   EvalList(args, op, env) == EvalList(SubstituteList(args, n, 0), op, env)
decreases len(args)
func EvalListEnvDefault(args List, op Op, n string, env dict[string]int) {
	match args {
		case Nil{}:
		case Cons{?h, ?t}:
			EvalEnvDefault(h, n, env)
			EvalListEnvDefault(t, op, n, env)
	}
}

// Exercise 5.18.

ghost
ensures   Substitute(Substitute(e, n, c), n, c) == Substitute(e, n, c)
decreases len(e)
func SubstituteIdempotent(e Expr, n string, c int) {
	match e {
		case Const{_}:
		case Var{_}:
		case ENode{_, ?args}:
			SubstituteListIdempotent(args, n, c)
	}
}

ghost
ensures   SubstituteList(SubstituteList(es, n, c), n, c) == SubstituteList(es, n, c)
decreases len(es)
func SubstituteListIdempotent(es List, n string, c int) {
	match es {
		case Nil{}:
		case Cons{?h, ?t}:
			SubstituteIdempotent(h, n, c)
			SubstituteListIdempotent(t, n, c)
	}
}
