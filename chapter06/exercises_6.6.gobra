package chapter06

// Exercise 6.19.

ghost
ensures xs.ReverseAux(ac).Length() == xs.Length() + ac.Length()
decreases len(xs)
pure func (xs List) LengthReverseAux(ac List) Unit {
	return match xs {
		case Nil{}:
			Unit{}
		case Cons{?head, ?tail}:
			let _ := tail.LengthReverseAux(Cons{head, ac}) in
			asserting(tail.ReverseAux(Cons{head, ac}).Length() == tail.Length() + List(Cons{head, ac}).Length())
	}
}

// Exercise 6.20.

ghost
ensures xs.Reverse().Length() == xs.Length()
decreases len(xs)
pure func LengthReverseAlternative(xs List) Unit {
	return xs.LengthReverseAux(Nil{})
}

// Exercise 6.21.
/*
 * The implementation of the lemma "ReverseAuxAppend" can be found in examples_6.6.gobra.
 *
 * Although it is not a calculational proof as asked in the exercise, Gobra
 * can still prove its correctness. We left out the additional asserts as they would
 * make the proof more convuluted.
 */

// Exercise 6.22.

ghost
ensures xs.Append(ys).Reverse() == ys.Reverse().Append(xs.Reverse())
decreases len(xs)
pure func (xs List) ReverseAppend(ys List) Unit {
	return match xs {
		case Nil{}:
			let _ := ys.AppendNil() in
			ys.Reverse().AppendNil()
		case Cons{?head, ?tail}:
			xs.ReverseAuxAppend(ys, Nil{})
	}
}

// Exercise 6.23.

ghost
ensures xs.Reverse().Reverse() == xs
decreases len(xs)
func (xs List) ReverseInvolution() {
	/*
	 * Making this lemma non-pure allows us to write it in a more readable way.
	 */
	if xs.isCons {
		head := xs.head
		tail := xs.tail

		assert xs.Reverse().Reverse() == xs.ReverseAux(Nil{}).Reverse()
		assert xs.ReverseAux(Nil{}).Reverse() == tail.ReverseAux(Cons{head, Nil{}}).Reverse()
		tail.ReverseAuxSlowCorrect(Cons{head, Nil{}})
		assert tail.ReverseAux(Cons{head, Nil{}}).Reverse() ==
			tail.SlowReverse().Append(Cons{head, Nil{}}).Reverse()
		tail.ReverseCorrect()
		assert tail.SlowReverse().Append(Cons{head, Nil{}}).Reverse() ==
			tail.Reverse().Append(Cons{head, Nil{}}).Reverse()
		tail.Reverse().ReverseAppend(Cons{head, Nil{}})
		assert tail.Reverse().Append(Cons{head, Nil{}}).Reverse() ==
			List(Cons{head, Nil{}}).Reverse().Append(tail.Reverse().Reverse())
		tail.ReverseInvolution()
		assert List(Cons{head, Nil{}}).Reverse().Append(tail.Reverse().Reverse()) ==
			List(Cons{head, Nil{}}).Reverse().Append(tail)
		List(Cons{head, Nil{}}).ReverseAuxCorrect(tail)
		assert List(Cons{head, Nil{}}).Reverse().Append(tail) ==
			List(Cons{head, Nil{}}).ReverseAux(tail)
		assert List(Cons{head, Nil{}}).ReverseAux(tail) == List(Nil{}).ReverseAux(xs)
		assert List(Nil{}).ReverseAux(xs) == xs
	}
}
