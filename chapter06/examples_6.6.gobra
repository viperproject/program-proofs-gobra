package chapter06

ghost
decreases len(xs)
pure func (xs List) SlowReverse() List {
	return match xs {
		case Nil{}:
		   Nil{}
		case Cons{?head, ?tail}:
			tail.SlowReverse().Snoc(head)
	}
}

ghost
ensures xs.SlowReverse().Length() == xs.Length()
decreases len(xs)
pure func (xs List) LengthSlowReverse() Unit {
	return match xs {
		case Nil{}:
			Unit{}
		case Cons{?head, ?tail}:
			/*
			 * We use a let expression to be able to call a helpful
			 * lemma. Notice that the value that is returned is not
			 * important here (we ignore it by assigning it to '_');
			 * here, we are only interested in "learning" the lemma's
			 * postcondition.
			 */
			let _ := tail.SlowReverse().LengthSnoc(head) in
			tail.LengthSlowReverse()
	}
}

/*
 * The term 'acc' is a reserved keyword in Gobra; its use-case will
 * be explained in the examples of Part 2 of the book.
 * For this reason, we use 'ac' instead.
 */
ghost
decreases len(xs)
pure func (xs List) ReverseAux(ac List) List {
	return match xs {
		case Nil{}:
			ac
		case Cons{?head, ?tail}:
			tail.ReverseAux(Cons{head, ac})
	}
}

/*
 * Gobra currently requires an explicitly conversion from 'Nil{}'
 * to 'List' before calling a method that takes a list as a
 * receiver on it. We cast 'Nil{}' to 'List' by writing 'List(Nil{})'.
 * This behaviour is likely to change in the future.
 * https://github.com/viperproject/gobra/issues/641
 */
ghost
ensures xs.ReverseAux(ac) == xs.SlowReverse().Append(ac)
decreases len(xs)
pure func (xs List) ReverseAuxSlowCorrect(ac List) Unit {
	return match xs {
		case Nil{}:
			Unit{}
		case Cons{?head, ?tail}:
			/*
			 * Let expressions can be nested.
			 */
			let _ := tail.SlowReverse().SnocAppend(head) in
			/*
			 * Gobra does not allow assert statements in pure functions.
			 * To address this limitation, we introduce function
			 * 'asserting'. It is defined and explained at the end
			 * of this file.
			 */
			let _ := asserting(Cons{head, List(Nil{}).Append(ac)} == Cons{head, ac}) in
			let _ := AppendAssociative(tail.SlowReverse(), Cons{head, Nil{}}, ac) in
			tail.ReverseAuxSlowCorrect(Cons{head, ac})
	}
}

ghost
decreases len(xs)
pure func (xs List) Reverse() List {
	return xs.ReverseAux(Nil{})
}

ghost
ensures xs.Reverse() == xs.SlowReverse()
decreases len(xs)
pure func (xs List) ReverseCorrect() Unit {
	return match xs {
		case Nil{}:
			Unit{}
		case Cons{_, ?tail}:
			let _ := xs.ReverseAuxSlowCorrect(Nil{}) in
			xs.SlowReverse().AppendNil()
	}
}

ghost
ensures xs.ReverseAux(ac) == xs.Reverse().Append(ac)
decreases len(xs)
pure func (xs List) ReverseAuxCorrect(ac List) Unit {
	return match xs {
		case Nil{}:
			Unit{}
		case Cons{?head, ?tail}:
			let _ := xs.ReverseAuxSlowCorrect(ac) in
			xs.ReverseCorrect()
	}
}

ghost
ensures xs.Reverse().Length() == xs.Length()
decreases len(xs)
pure func (xs List) LengthReverse() Unit {
	return let _ := xs.ReverseCorrect() in
		xs.LengthSlowReverse()
}

ghost
ensures xs.Append(ys).ReverseAux(ac) ==
	ys.Reverse().Append(xs.ReverseAux(ac))
decreases len(xs)
pure func (xs List) ReverseAuxAppend(ys List, ac List) Unit {
	return match xs {
		case Nil{}:
			ys.ReverseAuxCorrect(ac)
		case Cons{?head, ?tail}:
			tail.ReverseAuxAppend(ys, Cons{head, ac})
	}
}

ghost
ensures xs.Snoc(y) == xs.Append(Cons{y, Nil{}})
decreases len(xs)
pure func (xs List) SnocAppend(y int) Unit {
	// This example provides a solution to exercise 6.2.
	return match xs {
		case Nil{}:
			Unit{}
		case Cons{?head, ?tail}:
			tail.SnocAppend(y)
	}
}

/*
 * This function does not exist in the Dafny version.
 * Because of the restrictions that Gobra imposes on pure functions,
 * the body of pure function cannot contain an assert statement,
 * which is often necessary in order for Gobra to be aware of
 * important facts about the program. This function addresses that
 * limitation: because the condition that is passed to this function
 * must hold when the call occurs, this forces Gobra to check the
 * the precondition and to learn it if the precondition holds.
 */
ghost
requires b
decreases
pure func asserting(b bool) Unit {
	return Unit{}
}
