package chapter06

ghost
requires n >= 0
requires n <= xs.Length()
decreases len(xs)
pure func (xs List) Take(n int) List {
	return n == 0 ? Nil{} : Cons{xs.head, xs.tail.Take(n-1)}
}

ghost
requires n >= 0
requires n <= xs.Length()
decreases len(xs)
pure func (xs List) Drop(n int) List {
	return n == 0 ? xs : xs.tail.Drop(n-1)
}

ghost
requires n >= 0
requires n <= xs.Length()
ensures xs.Take(n).Append(xs.Drop(n)) == xs
decreases len(xs)
pure func (xs List) AppendTakeDrop(n int) Unit {
	return n == 0 || xs.isNil ? Unit{} : xs.tail.AppendTakeDrop(n-1)
}

ghost
ensures xs.Append(ys).Take(xs.Length()) == xs
ensures xs.Append(ys).Drop(xs.Length()) == ys
decreases len(xs)
pure func (xs List) TakeDropAppend(ys List) Unit {
	return match xs {
		case Nil{}:
			Unit{}
		case Cons{?head, ?tail}:
			tail.TakeDropAppend(ys)
	}
}
