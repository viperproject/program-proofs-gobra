package chapter6

ghost
ensures n >= 0
ensures n <= xs.Length()
decreases len(xs)
pure func (xs List) Find(y int) (n int) {
	return match xs {
		case Nil{}:
			0
		case Cons{?head, ?tail}:
			head == y ? 0 : 1 + tail.Find(y)
	}
}

ghost
ensures xs.Find(y) == xs.Length() || xs.At(xs.Find(y)) == y
decreases len(xs)
pure func (xs List) AtFind(y int) Unit {
	return xs.isNil || xs.head == y ? Unit{} : xs.tail.AtFind(y)
}

ghost
requires i >= 0
ensures i < xs.Find(y) ==> xs.At(i) != y
decreases len(xs)
pure func (xs List) BeforeFind(y int, i int) Unit {
	return xs.isNil || xs.head == y || i == 0 || i >= xs.Length() ?
		Unit{} :
		xs.tail.BeforeFind(y, i - 1)
}

ghost
ensures xs.Find(y) == xs.Length() ||
	xs.Append(ys).Find(y) == xs.Find(y)
decreases len(xs)
pure func (xs List) FindAppend(ys List, y int) Unit {
	return xs.isNil ? Unit{} : xs.tail.FindAppend(ys, y)
}

ghost
requires i >= 0
ensures i <= xs.Find(y) ==>
	xs.Find(y) == xs.Drop(i).Find(y) + i
decreases len(xs)
pure func (xs List) FindDrop(y int, i int) Unit {
	return xs.isNil || i == 0 ? Unit{} : xs.tail.FindDrop(y, i - 1)
}
