package chapter1

func Caller_v1() {
	t := Triple_v4(18)
	// assert t < 100 // uncommenting this line cases a verification error
}

// Similarly to Dafny, Gobra uses 'requires' clauses to establish 
// preconditions, and 'ensures' clauses to establish postconditions.
ensures r == 3 * x
func Triple_v5(x int) (r int) {
	y := 2 * x
	r = x + y
}

func Caller_v2() {
	t := Triple_v5(18)
	assert t < 100
}

requires x % 2 == 0
ensures r == 3 * x
func Triple_v6(x int) (r int) {
	y := x / 2
	r = 6 * y
}

requires 1 <= n
ensures  0 <= i && i < n
func Index_v1(n int) (i int) {
	i = n/2
	return i
}

requires 1 <= n
ensures  0 <= i && i < n
func Index_v2(n int) (i int) {
	i = 0
	return i
}
