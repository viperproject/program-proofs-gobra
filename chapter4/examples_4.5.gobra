package chapter4

// Gobra does not support generics at the moment. In all examples, we will monomorphise
// generic definitions, i.e., we will instantiate the generic types with a concrete type
// parameter (usually int, unless the examples demand something different).
// We will update these examples when Gobra supports generics.
type Tree adt {
	TLeaf{
		data Color
	}

	TNode{
		left  Tree
		right Tree
	}
}

ghost
// In Gobra, an ADT cannot be used directly as a termination measure. Instead,
// we must use the `len` function of the ADT. The len function guarantees that
// len(x) < len(y) if and only if x is structurally included in y.
decreases len(t)
pure func (t Tree) AllBlue() bool {
	return match t {
		case TLeaf{?c}: c == Blue{}
		case TNode{?left, ?right}: left.AllBlue() && right.AllBlue()
	}
}

ghost
ensures   0 <= r
decreases len(t)
pure func (t Tree) Size() (r int) {
	return match t {
		case TLeaf{_}: 1
		case TNode{?left, ?right}: left.Size() + right.Size()
	}
}